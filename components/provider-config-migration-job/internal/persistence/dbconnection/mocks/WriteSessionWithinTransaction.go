// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	dberrors "github.com/kyma-project/control-plane/components/provisioners-model-migrating-job/internal/persistence/dberrors"
	mock "github.com/stretchr/testify/mock"
)

// WriteSessionWithinTransaction is an autogenerated mock type for the WriteSessionWithinTransaction type
type WriteSessionWithinTransaction struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *WriteSessionWithinTransaction) Commit() dberrors.Error {
	ret := _m.Called()

	var r0 dberrors.Error
	if rf, ok := ret.Get(0).(func() dberrors.Error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dberrors.Error)
		}
	}

	return r0
}

// RollbackUnlessCommitted provides a mock function with given fields:
func (_m *WriteSessionWithinTransaction) RollbackUnlessCommitted() {
	_m.Called()
}

// UpdateProviderSpecificConfig provides a mock function with given fields: clusterID, providerSpecificConfig
func (_m *WriteSessionWithinTransaction) UpdateProviderSpecificConfig(clusterID string, providerSpecificConfig string) dberrors.Error {
	ret := _m.Called(clusterID, providerSpecificConfig)

	var r0 dberrors.Error
	if rf, ok := ret.Get(0).(func(string, string) dberrors.Error); ok {
		r0 = rf(clusterID, providerSpecificConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dberrors.Error)
		}
	}

	return r0
}
